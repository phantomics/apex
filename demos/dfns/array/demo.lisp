;;; -*- Mode:Lisp; Syntax:ANSI-Common-Lisp; Coding:utf-8; Package:AprilDemo.Dfns.Array -*-
;;;; demo.lisp

(in-package :april-demo.dfns.array)

(april-load (with (:space array-demo-space))
	    (asdf:system-relative-pathname (intern (package-name *package*) "KEYWORD") "array.apl"))

(specify-demo
 "April array demo"
 (with :space array-demo-space
       :description "Implements array processing functions from Dyalog's dfns.")
 (:tests (provision "found ← ('milly' 'molly' 'may') ('star' 'thing' 'stone')")
	 (is "found alget 'may'" "stone")
	 (is "found alpop 'molly'" #("thing" #(#("milly" "may") #("star" "stone"))))
	 (is "found alset 'may' 'pebble'" #(#("milly" "molly" "may") #("star" "thing" "pebble")))
	 (is "found alpush 'may' 'rock'" #(#("may" "milly" "molly" "may") #("rock" "star" "thing" "stone")))
	 (is ",acc ⍳4" #(#(1 2 3 4) #(2 3 4) #(3 4) 4))
	 (is "+acc ⍳4" #(10 9 7 4))
	 (is ",acc 2/¨⍳4" #(#(1 1 2 2 3 3 4 4) #(2 2 3 3 4 4) #(3 3 4 4) #(4 4)))
	 (is "{⍺,'f',⍵}acc'abcd'" #("afbfcfd" "bfcfd" "cfd" #\d))
	 (is "⍲acc 1 0 0" #*010)
	 (provision "vecs←(('hello' 'world')('bonjour' 'monde'))(('good' 'night')('bon' 'soir'))")
	 (is "0 enlist vecs" #(#\h #\e #\l #\l #\o #\w #\o #\r #\l #\d #\b #\o #\n #\j #\o #\u #\r #\m #\o
			       #\n #\d #\e #\g #\o #\o #\d #\n #\i #\g #\h #\t #\b #\o #\n #\s #\o #\i #\r))
	 (is "1 enlist vecs" #("hello" "world" "bonjour" "monde" "good" "night" "bon" "soir"))
	 (is "2 enlist vecs" #(#("hello" "world") #("bonjour" "monde") #("good" "night") #("bon" "soir")))
	 (is "3 enlist vecs" #(#(#("hello" "world") #("bonjour" "monde"))
			       #(#("good" "night") #("bon" "soir"))))
	 (provision "tea ← 2 2⍴('tea'4'two')(2'for' 'T')('me' '&' 'you')('u' 'and' 'me')")
	 (is "0 enlist tea" #(#\t #\e #\a 4 #\t #\w #\o 2 #\f #\o #\r #\T #\m #\e #\& #\y #\o #\u #\u #\a
			      #\n #\d #\m #\e))
	 (is "1 enlist tea" #("tea" 4 "two" 2 "for" #\T "me" #\& "you" #\u "and" "me"))
	 (is "2 enlist tea" #(#("tea" 4 "two") #(2 "for" #\T) #("me" #\& "you") #(#\u "and" "me")))
	 (is "'abracadabra' {⍺~⍵⊃⍺} foldl 1 2" "bcdb")
	 (is "'abracadabra' {⍺~⍵⊃⍺} foldl 2 1" "rcdr")
	 (is "0,∘⊂⍨ foldl 2 5⍴⍳10" #2A((5 #(4 #(3 #(2 #*10)))) (10 #(9 #(8 #(7 #(6 0)))))))
	 (is "nlines 2 3 4⍴⍳24" 7)
	 (is "nlines 2 2 2 2⍴2" 12)
	 (is "nlines 2 0 4⍴2" 1)
	 (is "nlines 2 3 0 0⍴2" 6)
	 (is "nlines 1 2 3 4 5 6 7 8⍴9" 5907)
	 (is "1(2 3),perv(4 5)6" #(#(#(1 4) #(1 5)) #(#(2 6) #(3 6))))
	 (is "2 3 3 2 +pred ⍳10" #(3 12 21 19))
	 (is "pmat 3" #2A((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1)))
	 (is "{⍵[pmat⍴⍵]}'tic' 'tac' 'toe'" #2A(("tic" "tac" "toe") ("tic" "toe" "tac")	("tac" "tic" "toe")
						("tac" "toe" "tic") ("toe" "tic" "tac") ("toe" "tac" "tic")))
	 (is "4 3 2⍴↓{⍵[pmat⍴⍵]}'abcd'" #3A((("abcd" "abdc") ("acbd" "acdb") ("adbc" "adcb"))
					    (("bacd" "badc") ("bcad" "bcda") ("bdac" "bdca"))
					    (("cabd" "cadb") ("cbad" "cbda") ("cdab" "cdba"))
					    (("dabc" "dacb") ("dbac" "dbca") ("dcab" "dcba"))))
	 (is "{⍵⍳⍵∘.{⍺⊃¨⊂⍵}⍵}↓pmat 3" #2A((1 2 3 4 5 6) (2 1 4 3 6 5)
					  (3 5 1 6 2 4) (4 6 2 5 1 3)
					  (5 3 6 1 4 2) (6 4 5 2 3 1)))
	 (is "mscan ⍳10" #(1 -1 2 -2 3 -3 4 -4 5 -5))
	 (is "dscan ⍳10" #(1 1/2 3/2 3/8 15/8 5/16 35/16 35/128 315/128 63/256))
	 (is "+ascan⍳10" #(1 3 6 10 15 21 28 36 45 55))
	 (is "-ascan⍳10" #(1 -1 -4 -8 -13 -19 -26 -34 -43 -53))
	 (is "{⍺,'-',⍵} ascan ↑('one' 'two' 'three')('un' 'deux' 'trois')('yan' 'tan' 'tethera')"
	     #2A(("one" "one-two" "one-two-three") ("un" "un-deux" "un-deux-trois")
		 ("yan" "yan-tan" "yan-tan-tethera")))
	 (is "2 1 2 2 1 select (1 2 3 4 5)(10 20 30 40 50)" #(10 2 30 40 5))
	 (is "{(⎕IO+⍵=' ')select ⍵ '.'} ↑'now is' 'the time'"
	     #2A((#\n #\o #\w #\. #\i #\s #\. #\.) (#\t #\h #\e #\. #\t #\i #\m #\e)))
	 (is "(2 3 4⍴⍳3) select 1 10 100×⊂2 3 4⍴⍳24"
	     #3A(((1 20 300 4) (50 600 7 80) (900 10 110 1200))
		 ((13 140 1500 16) (170 1800 19 200) (2100 22 230 2400))))
	 (is "1 2 select ('aaa' 'bbb')('AAA' 'BBB')" #("aaa" "BBB"))
	 (is "⌈(10000,10⍴1)×⍤1⊢(shannon⍤1 , ⊣) 1+~(⍳10) ∘.> ⍳10"
	     #2A((0 2 2 2 2 2 2 2 2 2 2) (4690 1 2 2 2 2 2 2 2 2 2)
		 (7220 1 1 2 2 2 2 2 2 2 2) (8813 1 1 1 2 2 2 2 2 2 2)
		 (9710 1 1 1 1 2 2 2 2 2 2) (10000 1 1 1 1 1 2 2 2 2 2)
		 (9710 1 1 1 1 1 1 2 2 2 2) (8813 1 1 1 1 1 1 1 2 2 2)
		 (7220 1 1 1 1 1 1 1 1 2 2) (4690 1 1 1 1 1 1 1 1 1 2)))
	 (is "⌊10000×shannon¨ 'banana' 'orange'" #(14591 25849))
	 (is "⌊10000×shannon ⎕A" 47004)
	 (is "shannon∘{⍳2*⍵}¨ ⍳10" #(1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0))
	 (is "'abba' subvec 'babba'" 1)
	 (is "'abba' subvec 'abbas'" 1)
	 (is "'abba' subvec 'baab'" 0)
	 (is "'abba' subvec 'abba'" 1)
	 (is "'abba'∘subvec¨'zabba' 'babba' 'abbas' 'baab'" #(1 1 1 0))
	 (is "3 3 2 1 subvec 4 3 5 6 3 2 8 1 9" 1)
	 (is "1 2 3 4 subvec 1 3 4 2 1 2 3 4" 1)
	 (is "'abba' subvec 'ababa'" 1)
	 (is "1 2 3 subvec 3 2 1" 0)
	 (is "3 3 2 1 subvec 3 2 1" 0)
	 (is "3 3 2 1 subvec 4 3 5 6 3 2 8 1 9" 1)
	 (is "'also' 'work' subvec 'also' 'nested' 'arrays' 'work'" 1)
	 (is "0 subvec ,0" 1)))

(provision "p1790 ← 236841 55540 70835 68705 278514 475327 141822 179570 331589 353523 432879 68446 206236 85533 630560")
(is "105 apportion p1790" #(7 2 2 2 8 14 4 5 10 10 12 2 6 3 18))
(is "{⍵≥5} bsearch 3 7" #(5))
(is "{⍵≥9} bsearch 3 7" #(8))
(is "{⍵≥1} bsearch 3 7" #(3))
(is "10 colsum 10 10⍴⍳9" #(5 1 2 3 4 5 6 7 8 8 6))
(is "10 colsum 10 10⍴1" #(1 1 1 1 1 1 1 1 1 1 0))
(is "2 colsum 10 10⍴1" #(1 0 0 1 1 1 1 1 1 1 0 1 1 0))
(is "3 colsum 10 10⍴1" #(1 1 2 2 2 2 2 2 2 2 1 1))e
(is "10 colsum 4 5⍴⍳9" #(1 8 2 6 0 4))
(is "2 3 5 7 ∘.efract 11 13 17 19" #2A((#(6 66) #(7 91) #(9 153) #(10 190))
				       (#(4 44) #(5 33 2145) #(6 102) #(7 67 8911))
				       (#(3 9 99) #(3 20 780) #(4 23 1564) #(4 76))
				       (#(2 8 88) #(2 26) #(3 13 663) #(3 29 1653))))
(is "1 factorial¨⍳10" #(1 2 6 24 120 720 5040 40320 362880 3628800))
(is "(⊂0 1)fibonacci¨⍳10" #(1 1 2 3 5 8 13 21 34 55))
;; fibs:
(april "{+/{⍵!⌽⍵}(⍳⍵)-⎕io}¨⍳10")
(april "⍬∘⍴∘⊃∘(⊢∘⌽∘(+\\)/)∘(,∘(⊂0 1))∘⍳¨⍳10")
(april "⌊(0.5×1+1 ¯1×5*0.5)∘{(-⌿⍺∘.*⍵)÷-/⍺} ⍳10")
;; (april "{1∧+∘÷/0,⍵/1}¨0,⍳10") broken
(is "factors +441256830030" #(2 3 3 5 71 73 945949))
(is "factors +441256830031" #(587 9007 83459))
(is "105 gcd 330" 15)
(is "factors (3×5×7) gcd 5×7×11" #(5 7))
(is "factors (3×5×7) lcm 5×7×11" #(3 5 7 11))
(is "¯1 0 1∘.gcd ¯1 0 1" #2A((1 1 1) (1 0 1) (1 1 1)))
;; (is "¯1 0 1∘.lcm ¯1 0 1") broken: divide by zero
(is "100 nicediv 7" #(14 15 14 14 14 15 14))
(is "↑(0,⍳10)nicediv¨5" #2A((0 0 0 0 0) (0 0 1 0 0) (0 1 0 1 0) (1 0 1 0 1) (1 1 0 1 1) (1 1 1 1 1)
			     (1 1 2 1 1) (1 2 1 2 1) (2 1 2 1 2) (2 2 1 2 2) (2 2 2 2 2)))
(is "⍕⊖¨100 stack¨12 23 39"
    #2A((#\  #\  #\⎕ #\  #\  #\⎕ #\  #\  #\⎕ #\  #\  #\⎕ #\  #\  #\  #\  #\⎕ #\  #\
	     #\⎕ #\  #\  #\⎕ #\  #\  #\⎕ #\  #\⎕ #\  #\  #\⎕ #\  #\  #\⎕ #\  #\  #\⎕ #\  #\  #\
	     #\⎕ #\  #\⎕ #\  #\⎕ #\  #\⎕ #\⎕ #\  #\⎕ #\  #\⎕ #\  #\⎕ #\  #\⎕ #\⎕ #\  #\⎕
	     #\  #\⎕ #\  #\⎕ #\⎕ #\  #\⎕ #\  #\⎕ #\  #\⎕ #\  #\⎕ #\⎕ #\  #\⎕ #\  #\⎕ #\  #\⎕)
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕)
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕)
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\ )
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕
	     #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\ )
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\ )
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\ )
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\ )
	(#\  #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\⎕ #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\
	     #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\  #\ )))
(is "{∧/⍵∧.=⍵∘.{+/⍺ nicediv ⍵}⍵}⍳50" 1)
(is "osc¨⍳30" #(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(is "0 5 10 15 range ¯2+⍳18" #(0 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4))
(is "¯1 0 1 range 1○⍳40" #(2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2))
;; (is "(5 7 to 20)range 2 3 4⍴1 to 24") need 'to' working

;; (is "rational 0.75")
(is "⍬ sieve 1+⍳99" #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97))

(is "⌊100000×(0.9 0.02) bayes {⍵,1-⍵}0.03" #(58189 41810))
(is "⌊100000×(3 2 4÷11 11 16) bayes 11 11 16÷38" #(33333 22222 44444))
(is "⌊100000×Cholesky 5 5⍴111  106   22  ¯85  ¯14 106  198  ¯91 ¯150   69 22  ¯91  196   22 ¯118 ¯85 ¯150   22  166  ¯77 ¯14   69 ¯118  ¯77  151"
    #2A((1053565 0 0 0 0) (1006107 983741 0 0 0) (208814 -1138602 787389 0 0)
	(-806785 -699664 -518384 500847 0) (-132883 837306 -252599 -843204 128299)))
;; (is "3 ×kcell 1 2 3 4 5")
(is "1 kball .5" -1.0)
(is "2 1 kball 1 3⍴2 3 4" #(-1 0 1))
;; (is "1 kball .5 .5") bug
(is "1 kball ¯1 0" 0)
;; (is "1 kball .8 .9") bug
(is "5 kball 2 3" -1)
(is "5 kball 3 4" 0)
(is "5 kball 5 6" 1)
(is "5 kball 5 6" 1)
(is "5 1 2 kball 2 3,4 6,⍪9 9" #(-1 0 1))
(is "13 kball 5 6 7" -1)
(is "13 kball 3 4 12" 0)
(is "13 kball 6 8 12" 1)
(is "13 ¯1 2 ¯3 kball 4 2 9,2 6 15,⍪2 1 4" #(0 1 -1))
(is "⌊100000×1 ksphere 10" 6283185)
(is "⌊100000×2 ksphere 10" 125663707)
(is "⌊10000×(0,⍳10) ksphere 1" #(19999 62831 125663 197392 263189 310062 330733 324696 296865 255016 207251))
(is "⌊10000×6.2569 ksphere 1" 331611)
;; (is "⌊10000×(0,⍳10) kvol 1" #(19999 31415 41887 49348 52637 51677 47247 40587 32985 25501)) bug: / by 0
(is "⌊10000×(⍳10) kvol 1" #(19999 31415 41887 49348 52637 51677 47247 40587 32985 25501))
(is "mean 1 2 3 4" #(5/2))
(is "stdev 2 2 2" 0.0)
(is "stdev 1 2 3" 81649)
;; add time-consuming function to test NormRand?
(is "2 root 64" 8)
(is "3 root 64" 4)
(is "realroots 2 1 ¯3" #(1.0 -1.5))
;; TODO: ⌈⌊ don't work with complex numbers - get these results rounded
(is "roots ⍳3" #(#C(-99999.99999999999d0 141421.35623730952d0)
		 #C(-100000.0d0 -141421.35623730952d0)))




